library(ggplot2)
confint(fit)
confint(fit, "bp")
?t.test
# Calculating all values manually
x <- blood_pressure$weight
y <- blood_pressure$bp
x_bar <- mean(x)
y_bar <- mean(y)
n <- 26
s_xx <- sum((x - x_bar)^2)
s_xy <- sum((x - x_bar) * (y - y_bar))
beta_one_hat <- s_xy / s_xx
beta_zero_hat <- y_bar - beta_one_hat * x_bar
sigma_hat <- sqrt((1 / (n - 2)) * sum((y - (beta_zero_hat + beta_one_hat * x))^2))
# Using coef(m) to confirm that our beta_one_hat and beta_zero_hat match
coef(fit)[1] # beta_zero_hat
coef(fit)[2] # beta_one_hat
fit <- lm(bp ~ weight, data = blood_pressure)
summary(fit)
fit <- lm(weight ~ bp, data = blood_pressure)
summary(fit)
fit <- lm(bp ~ weight, data = blood_pressure)
summary(fit)
# Calculating all values manually
x <- blood_pressure$weight
y <- blood_pressure$bp
x_bar <- mean(x)
y_bar <- mean(y)
n <- 26
s_xx <- sum((x - x_bar)^2)
s_xy <- sum((x - x_bar) * (y - y_bar))
beta_one_hat <- s_xy / s_xx
beta_zero_hat <- y_bar - beta_one_hat * x_bar
sigma_hat <- sqrt((1 / (n - 2)) * sum((y - (beta_zero_hat + beta_one_hat * x))^2))
# Using coef(m) to confirm that our beta_one_hat and beta_zero_hat match
coef(fit)[1] # beta_zero_hat
coef(fit)[2] # beta_one_hat
# Calculating all values manually
x <- blood_pressure$weight
y <- blood_pressure$bp
x_bar <- mean(x)
y_bar <- mean(y)
n <- 26
s_xx <- sum((x - x_bar)^2)
s_xy <- sum((x - x_bar) * (y - y_bar))
beta_one_hat <- s_xy / s_xx
beta_zero_hat <- y_bar - beta_one_hat * x_bar
sigma_hat <- sqrt((1 / (n - 2)) * sum((y - (beta_zero_hat + beta_one_hat * x))^2))
beta_one_hat
beta_zero_hat
# Using coef(m) to confirm that our beta_one_hat and beta_zero_hat match
coef(fit)[1] # beta_zero_hat
coef(fit)[2] # beta_one_hat
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t
# Calculating all values manually
x <- blood_pressure$weight
y <- blood_pressure$bp
x_bar <- mean(x)
y_bar <- mean(y)
n <- 26
s_xx <- sum((x - x_bar)^2)
s_xy <- sum((x - x_bar) * (y - y_bar))
beta_one_hat <- s_xy / s_xx
beta_zero_hat <- y_bar - beta_one_hat * x_bar
sigma_hat <- sqrt((1 / (n - 2)) * sum((y - (beta_zero_hat + beta_one_hat * x))^2))
sigma_hat
# Using coef(fit) to confirm that our beta_one_hat and beta_zero_hat match
coef(fit)[1] # beta_zero_hat
coef(fit)[2] # beta_one_hat
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t
t <- (beta_one_hat - 2) / (sigma_hat * sqrt(1 / s_xx))
t
t <- (beta_one_hat - 0.3) / (sigma_hat * sqrt(1 / s_xx))
t
t <- (beta_one_hat - 0) / (sigma_hat * sqrt(1 / s_xx))
t
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t
# Calculating all values manually
x <- blood_pressure$weight
y <- blood_pressure$bp
x_bar <- mean(x)
y_bar <- mean(y)
n <- 26
s_xx <- sum((x - x_bar)^2)
s_xy <- sum((x - x_bar) * (y - y_bar))
beta_one_hat <- s_xy / s_xx
beta_zero_hat <- y_bar - beta_one_hat * x_bar
sigma_hat <- sqrt((1 / (n - 2)) * sum((y - (beta_zero_hat + beta_one_hat * x))^2))
s_xx
# Using coef(fit) to confirm that our beta_one_hat and beta_zero_hat match
coef(fit)[1] # beta_zero_hat
coef(fit)[2] # beta_one_hat
# Calculating all values manually
x <- blood_pressure$weight
y <- blood_pressure$bp
x_bar <- mean(x)
y_bar <- mean(y)
n <- 26
s_xx <- sum((x - x_bar)^2)
s_xy <- sum((x - x_bar) * (y - y_bar))
beta_one_hat <- s_xy / s_xx
beta_zero_hat <- y_bar - beta_one_hat * x_bar
sigma_hat <- sqrt((1 / (n - 2)) * sum((y - (beta_zero_hat + beta_one_hat * x))^2))
# Using coef(fit) to confirm that our beta_one_hat and beta_zero_hat match
coef(fit)[1] # beta_zero_hat
coef(fit)[2] # beta_one_hat
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
t
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
(0.419 + 50) / (8.681 * sqrt(1 / 15312.35))
t <- (beta_one_hat + 50) / (sigma_hat * sqrt(1 / s_xx))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
p <- (1 - pt(abs(t), df = n - 2)) * 2
print(p)
?htest
p <- (1 - pt(abs(t), df = n - 2)) * 2
print(p)
View(blood_pressure)
knitr::opts_chunk$set(echo = TRUE)
blood_pressure <- read.csv("\Users\Emily\Desktop\STAT 4355\blood-pressure.csv")
knitr::opts_chunk$set(echo = TRUE)
blood_pressure <- read.csv("Users\Emily\Desktop\STAT 4355\blood-pressure.csv")
knitr::opts_chunk$set(echo = TRUE)
blood_pressure <- read.csv("~/Desktop/STAT 4355")
blood_pressure <- read.csv("/Users/Emily/Desktop/STAT 4355/blood-pressure.csv")
knitr::opts_chunk$set(echo = TRUE)
fit <- lm(bp ~ weight, data = blood_pressure)
summary(fit)
?prediction
?predict
iris <- load("iris")
library(ggplot2)
iris <- load("iris")
iris <- data("iris")
View(USCereal)
cereal <- data("USCereal")
library("UsingR")
library(ggplot2)
cereal <- data("USCereal")
cereal <- data("UScereal")
force(UScereal)
data("UScereal")
library(ggplot2)
library("UsingR")
data("UScereal")
force(UScereal)
View(UScereal)
fit <- lm(calories ~ carbo, data = "UScereal")
fit <- lm(calories ~ carbo, data = UScereal)
ggplot(data = UScereal) +
geom_point(mapping = aes(x = carbo, y = calories)) +
geom_smooth(method = "lm")
ggplot(data = UScereal) +
geom_point(mapping = aes(x = carbo, y = calories)) +
geom_smooth(method = "lm")
ggplot(data = UScereal) +
geom_point(mapping = aes(x = carbo, y = calories)) +
geom_smooth(method = "lm")
ggplot(data = UScereal, mapping = aes(x = carbo, y = calories)) +
geom_point() +
geom_smooth(method = "lm")
summary(fit)
confint(fit)
confint(coef(fit)[1])
confint(coef(fit))
coef(fit)
summary(fit)
newx <- data.frame(x = c(30, 45, 60))
predict(fit, newdata = newx, interval = "none")
predict(fit, newdata = newx, interval = "none")
newx <- data.frame(carbo = c(30, 45, 60))
predict(fit, newdata = newx, interval = "none")
predict(fit, newdata = newx, interval = "confidence")
predict(fit, newdata = newx, interval = "prediction")
confint(fit)
confint(fit)[1]
confint(fit)[2]
confint(fit)[1,]
confint(fit)[2,]
confint(fit)[,2]
confint(fit)[2,]
confint(fit)
confint(fit)[2,]
predict(fit, newdata = newx, interval = "confidence")
coef(fit)
summary(fit)
fit$residuals
fit$coefficients
summary(fit)
predict(fit, interval = 'prediction', level = 0.99)
newcarb <- data.frame(carbo = UScereal$carbo)
predict(fit, newdata = newcarb, interval = 'prediction', level = 0.99)
library(readr)
airbnb <- read_csv("Downloads/listings.csv")
View(airbnb)
airbnb.str()
str(airbnb)
?drop
library(dplyr)
?select
?select
airbnb_nums <- select(airbnb, is.numeric)
View(airbnb_nums)
airbnb_nums <- select(airbnb, where(is.numeric || amenities || price || host_since)
all_of(c('amenities','price', 'host_since'))
airbnb_nums <- select(airbnb, where(is.numeric) ||
all_of(c('amenities','price', 'host_since')))
airbnb_nums <- select(airbnb, where(is.numeric ||
all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb, where(is.numeric() ||
all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb, where(is.numeric ||
all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb, where(is.numeric || all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb, where(is.numeric | all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb,
where(is.numeric || all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb,
where(is.numeric || all_of(['amenities','price', 'host_since'])))
where(is.numeric || all_of(c('amenities','price', 'host_since')))
airbnb_nums <- select(airbnb,
where(is.numeric || all_of(c('amenities','price', 'host_since'))))
airbnb_nums <- select(airbnb,
where(is.numeric) || all_of(c('amenities','price', 'host_since')))
airbnb_nums <- select(airbnb,
where(is.numeric) | all_of(c('amenities','price', 'host_since')))
airbnb_nums <- select(airbnb, where(is.numeric) |
all_of(c('amenities','price', 'host_since')))
airbnb_nums <- select(airbnb, where(is.numeric) |
all_of(c('amenities','price',
'host_since', 'host_response_rate')))
airbnb_nums <- select(airbnb, where(is.numeric) |
all_of(c('amenities','price', 'zipcode',
'host_since', 'host_response_rate')))
airbnb <- select(airbnb, where(is.numeric) |
all_of(c('amenities','price', 'zipcode',
'host_since', 'host_response_rate')))
View(airbnb)
str(airbnb)
knitr::opts_chunk$set(echo = TRUE)
fit <- lm(y ~ x1 + x2 + x5 + x7 + x8, data = football)
library(ggplot2)
library(reshape2)
football <- read.csv("football.csv")
football2 <- melt(football[,2:11], id.vars = 'y')
ggplot(data = football2) +
geom_jitter(mapping = aes(x = value, y = y, colour = variable)) +
facet_wrap(~variable, scales = "free_x")
fit <- lm(y ~ x1 + x2 + x5 + x7 + x8, data = football)
summary(fit)
anova(fit)
fit0 <- fit(y~1, data = football)
fit0 <- lm(y~1, data = football)
anova(fit0, fit1)
fit0 <- lm(y~1, data = football)
anova(fit0, fit)
qf(0.95, 5, 22)
summary(fit)
qf(0.95, 5, 22, lower.tail = FALSE)
qf(0.05, 5, 22, lower.tail = FALSE)
qf(0.95, 5, 22)
reduced = lm(y ~ x2 + x8, data = football)
anova(reduced, fit)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = football2) +
geom_jitter(mapping = aes(x = value, y = y, colour = variable)) +
geom_smooth(mapping = aes(x = value, y = y, colour = variable), method = lm, se = FALSE)
library(ggplot2)
ggplot(data = airbnb) +
geom_histogram(price)
ggplot(data = airbnb) +
geom_histogram(mapping = aes(x = price))
airbnb$price = substring(airbnb$price, first = 2)
airbnb$price = as.numeric(airbnb$price)
ggplot(data = airbnb) +
geom_histogram(mapping = aes(x = price))
ggplot(data = airbnb, mapping = aes(x = price)) +
geom_histogram()
ggplot(data = subset(airbnb, airbnb$price < 375), mapping = aes(x = price)) +
geom_histogram()
ggplot(data = subset(airbnb, airbnb$price < 300), mapping = aes(x = price)) +
geom_histogram()
ggplot(data = subset(airbnb, airbnb$price < 300), mapping = aes(x = price)) +
geom_histogram(bins = ceiling(sqrt(length(subset(airbnb, airbnb$price < 300)$price))))
ggplot(data = subset(airbnb, airbnb$price < 300), mapping = aes(x = price)) +
geom_histogram()
ggplot(data = airbnb, mapping = aes(x = price)) +
geom_histogram()
library(ggplot2)
library(dplyr)
library(readxl)
library(reshape2)
listings <- read.csv("listings.csv")
str(airbnb)
# Eliminate all non-numeric type variables except for the select few
# non-numeric variables that we intend to manipulate
airbnb <- select(listings, where(is.numeric) |
all_of(c('amenities','price', 'zipcode',
'host_since', 'host_response_rate')))
str(airbnb)
sort(table(airbnb$zipcode), decreasing = TRUE)
only_one_zipcode <- airbnb[airbnb$zipcode == 10028, ]
airbnb$price = substring(airbnb$price, first = 2)
airbnb$price = as.numeric(airbnb$price)
airbnb$zipcode = as.numeric(airbnb$zipcode)
fit <- lm(price ~ host_listings_count+accommodates+bathrooms+bedrooms+beds+
availability_365+number_of_reviews+review_scores_rating, data = airbnb)
summary(fit)
fit2 <- lm(price ~ host_listings_count+accommodates+bathrooms+bedrooms+beds+
availability_365+number_of_reviews+review_scores_rating, data = only_one_zipcode)
summary(fit2)
ggplot(data = only_one_zipcode, mapping = aes(y = price, x = accommodates)) +
geom_jitter() +
geom_smooth()
ggplot(data = only_one_zipcode, mapping = aes(y = price, x = beds)) +
geom_jitter()
ggplot(data = airbnb, mapping = aes(x = price)) +
geom_histogram()
summary(fit2)
fit2 <- lm(price ~ host_listings_count+accommodates+bathrooms+bedrooms+beds+
availability_365+number_of_reviews+review_scores_rating, data = only_one_zipcode)
fit <- lm(price ~ host_listings_count+accommodates+bathrooms+bedrooms+beds+
availability_365+number_of_reviews+review_scores_rating, data = airbnb)
summary(fit)
fit2 <- lm(price ~ host_listings_count+accommodates+bathrooms+bedrooms+beds+
availability_365+number_of_reviews+review_scores_rating, data = only_one_zipcode)
knitr::opts_chunk$set(echo = TRUE)
range(stdres(fit))
football <- read.csv("football.csv")
fit <- lm(y ~ x2 + x7 + x8, data = football)
library(MASS)
stdres(fit)
studres(fit)
rstudent(fit)
range(stdres(fit))
barplot(height = stdres(fit), names.arg = 1:28,
main = "Standardized Residuals", xlab = "Index",
ylab = "Standardized Residual", ylim = c(-3.5, 3.5))
abline(h = 3, col = "Red", lwd = 2)
abline(h = -3, col = "Red", lwd = 2)
range(studres(fit))
barplot(height = studres(fit), names.arg = 1:28,
main = "Studentized Residuals", xlab = "Index",
ylab = "Studentized Residual", ylim = c(-3.5, 3.5))
abline(h = 3, col = "Red", lwd = 2)
abline(h = -3, col = "Red", lwd = 2)
range(rstudent(fit))
barplot(height = rstudent(fit), names.arg = 1:28,
main = "R-Student Residuals", xlab = "Index",
ylab = "R-Student Residual", ylim=c(-4, 4))
abline(h = qt(0.05 / (2 * 28), 23, lower.tail = FALSE), col = "Red", lwd = 2)
abline(h = -qt(0.05 / (2 * 28), 23, lower.tail = FALSE), col = "Red", lwd = 2)
qt(0.05 / (2 * 28), 23, lower.tail = FALSE)
influence.measures(fit)
summary(influence.measures(fit))
dfbetasPlots(fit, intercept = TRUE)
library(car)
install.packages(car)
3 + 3
install.packages('car')
library(car)
dfbetasPlots(fit, intercept = TRUE)
influenceIndexPlot(fit)
?influenceIndexPlot
influenceIndexPlot(fit, vars = c("hat", "Cook", "dfbetas"))
influenceIndexPlot(fit, vars = c("hat", "Cook"))
influenceIndexPlot(fit, vars = "dfbetas")
influenceIndexPlot(fit, vars = c("hat", "Cook"), main = "Hat Values and Cook's D")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
football <- read.csv("football.csv")
football2 <- melt(football[,2:11], id.vars = 'y')
ggplot(data = football2) +
geom_jitter(mapping = aes(x = value, y = y, colour = variable)) +
geom_smooth(mapping = aes(x = value, y = y, colour = variable), method = lm, se = FALSE) +
facet_wrap(~variable, scales = "free_x")
vif(fit)
par(mfrow = c(1, 2))
hist(studres(fit), breaks=10, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
qqPlot(fit)
par(mfrow = c(1, 2))
hist(studres(fit), breaks=15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
qqPlot(fit)
par(mfrow = c(1, 2))
hist(studres(fit), breaks = 10, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
qqPlot(fit)
par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
qqPlot(fit)
residualPlots(fit, type = "rstudent", fitted = FALSE, quadratic = FALSE,
col = "dodge", pch = 16, cex = 1.5, cex.axis = 1.5,
cex.lab = 1.5)
residualPlots(fit, type = "rstudent", fitted = FALSE, quadratic = FALSE,
pch = 16, cex = 1.5, cex.axis = 1.5,
cex.lab = 1.5)
residualPlots(fit, type = "rstudent", fitted = FALSE, quadratic = FALSE,
col = 'cornflowerblue', pch = 16, cex = 1.5, cex.axis = 1.5,
cex.lab = 1.5)
par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 20, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 10, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 18, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 20, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 25, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 3)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 2, cex.main = 2)
# par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
par(mfrow = c(1, 2))
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
hist(studres(fit), breaks = 15, freq = FALSE, col = "cornflowerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
qqPlot(fit)
residualPlot(fit, type = "rstudent", quadratic = FALSE, col = "dodgerblue",
pch = 16, cex = 1.5, cex.axis = 1.5, cex.lab = 1.5)
hist(studres(fit), breaks = 15, freq = FALSE, col = "dodgerblue",
cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
source("~/Desktop/STAT 4355/Project/data cleaning.R")
setwd("~/Desktop/STAT 4355/Project")
source("~/Desktop/STAT 4355/Project/current.R")
airbnb[,-4037]
summary(airbnb[,-4037]['price'])
summary(airbnb['price',4037])
summary(airbnb['price'])
?drop
?filter
airbnb[, 'price']
airbnb[4037, ]
airbnb[76, ]
airbnb['4037']
airbnb['4037', ]
summary(airbnb[-'4037', ]$price)
View(inf_measures_df)
removed_outliers <- dplyr::filter(airbnb, -c('4037'))
removed_outliers <- dplyr::filter(airbnb, price != 2450)
full2 <- lm(price ~ security_deposit + total_listings + accommodates +
bathrooms + bedrooms + beds + num_guests + min_nights +
max_nights + year_availability + num_reviews + review_score +
reviews_per_month + response_rate + distance + days_hosting +
num_amenities, data = removed_outliers)
summary(full2)
reduced2 <- lm(price ~ security_deposit + total_listings + accommodates +
bathrooms + beds + num_guests + min_nights +
year_availability + num_reviews + review_score +
reviews_per_month +distance + num_amenities,
data = removed_outliers)
summary(reduced2)
source("~/Desktop/STAT 4355/Project/current.R")
median(airbnb$min_nights)
mean(airbnb$min_nights)
qf(0.5, 14, 840)
version()
knitr::opts_chunk$set(echo = TRUE)
# --Part (a)--
round((6 + 5 - 4 / (3 ^ 2)), digits = 2)
# --Part (b)--
round((exp(sqrt((14 + 13) / (12 + 11)))), digits = 2)
# --Part (c)--
round((((11 + factorial(12)) / (factorial(13) + 14)) ^ 2), digits = 2)
install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec()
# --Part (a)--
round((6 + 5 - 4 / (3 ^ 2)), digits = 2)
# --Part (b)--
round((exp(sqrt((14 + 13) / (12 + 11)))), digits = 2)
# --Part (c)--
round((((11 + factorial(12)) / (factorial(13) + 14)) ^ 2), digits = 2)
